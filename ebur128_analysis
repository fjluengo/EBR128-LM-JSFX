// Copyright 2015 , tb-software.com
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted 
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions 
//and the following disclaimer. 
//
//Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//and the following disclaimer in the documentation and/or other materials provided with the distribution. 
//
//The name of tb-software.com may not be used to endorse or 
//promote products derived from this software without specific prior written permission. 
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// EBUR128 Loudness Measurement
// by TBProAudio 2015 (www.tb-software.com)

// Changelog
// 1.0: First public release
// 1.1: Changed of usage of Memory Manager, Write automation data
// 1.2: Added TimerClass to controll update of display and automation data more precisely
// 1.3: Rearrangement of includes
// 1.4: Increased precision, Multichannel Support, reduced number of ext libraries
// 1.5: Improved TP Measurement
// 1.6: Added srate
// 1.7: TP Measurement based on ITU 1770
// 1.8: Synced Measurement
// 1.9: Small fixes
// 2.0: TP measurement adjusted according BS 1770 beyond 44/48K
// 2.1: SL/ML update every 100ms according EBU R128 spec
// 2.2: Small adjustment of 2x FIR filter
// 2.3: TB-Measurement according BS.1770-4
// 2.4: More LRA info, LRA buffer fix

desc:EBUR128 Loudness Meter (ELFERNA)V1.0
import memorymanager.jsfx-inc
import ebur128.jsfx-inc

//////////////////////////////////////
// Hidden Slider to provide Automation data
slider1:-144<-144,0,0.1>-_OUT: IL Disp
slider2:-144<-144,0,0.1>-_OUT: ML Disp
slider3:-144<-144,0,0.1>-_OUT: ML Max Disp
slider4:-144<-144,0,0.1>-_OUT: SL Disp
slider5:-144<-144,0,0.1>-_OUT: SL Max Disp
slider6:-144<-144,6,0.01>-_OUT: TP Disp
slider7:0<0,60,0.1>-_OUT: LRA Disp
////////////////////////////////////////

slider9:0<0,3,{2.0 Stereo,4.0 Surround,4.1 Surround,5.1 Surround>Channel Config
slider11:-144<-144,6,0.1>-Integrated Loudness LUFS
slider12:-144<-144,6,0.1>-Momentary Loudness LUFS
slider13:-144<-144,6,0.1>-Momentary Loudness Max LUFS
slider14:-144<-144,6,0.1>-Short-Term Loudness LUFS
slider15:-144<-144,6,0.1>-Short-Term Loudness Max LUFS
slider16:-144<-144,6,0.01>-True Peak dB
slider17:0<0,60,0.1>-Loudness Range LU

slider61:1<0,1,1{Off,On}>-Synced

slider21:-144<-144,6,0.01>-test
slider22:-144<-144,6,0.01>-test
slider23:-144<-144,6,0.01>-test
slider24:0<0,36000,1>-test

@init

  // Init our small mem manager, just to manage our own memory and align to foreign code/mem
  MM.MemMgr_Init(0);

  // EO@function

  EBUR128LM.LM_EBUR128_Init_MultiCh(srate);
  timer.EBU_Time_Init_Ms(10, srate);

  slider1 = slider11;
  slider2 = slider12;
  slider3 = slider13;
  slider4 = slider14;
  slider5 = slider15;
  slider6 = slider16;
  slider7 = slider17;
    
  slider_automate(slider1);
  slider_automate(slider2);
  slider_automate(slider3);
  slider_automate(slider4);
  slider_automate(slider5);
  slider_automate(slider6);
  slider_automate(slider7);

  SHOW_RLA_INFO = 0;

// EO@init

@slider
// EO@slider 

@block
// EO@block
 
@sample
do_measure = 0;
  (slider61 == 0) ?
  (
    do_measure = 1;
  ):
  (
    (play_state == 1) ? 
      do_measure = 1;  
  );


  (do_measure) ? 
  (
    EBUR128LM.LM_EBUR128_Process_MultiCh(spl0, spl1, spl2, spl3, spl4, spl5, slider9);
    
    (timer.EBU_Time_Count()) ?
    (
      slider11 = EBUR128LM.LM_EBUR128_GetIL_LUFS();
      slider12 = EBUR128LM.LM_EBUR128_GetML_LUFS();
      slider13 = EBUR128LM.LM_EBUR128_GetMLMax_LUFS();
      slider14 = EBUR128LM.LM_EBUR128_GetSL_LUFS();
      slider15 = EBUR128LM.LM_EBUR128_GetSLMax_LUFS();
      slider16 = EBUR128LM.LM_EBUR128_GetTP_dbFS();
      slider17 = EBUR128LM.LM_EBUR128_GetLRA_LU();
      
      slider21 = EBUR128LM.LM_EBUR128_GetLRA_Low();
      slider22 = EBUR128LM.LM_EBUR128_GetLRA_High();
      slider23 = EBUR128LM.LM_EBUR128_GetLRA_LU();
      slider24 = EBUR128LM.LM_EBUR128_GetLRA_Count();
  
      slider1 = slider11;
      slider2 = slider12;
      slider3 = slider13;
      slider4 = slider14;
      slider5 = slider15;
      slider6 = slider16;
      slider7 = slider17;
      
      slider_automate(slider1);
      slider_automate(slider2);
      slider_automate(slider3);
      slider_automate(slider4);
      slider_automate(slider5);
      slider_automate(slider6);
      slider_automate(slider7);    
    )
  );
// EO@sample

// UI MOD BY ELFERNA
@gfx 500 171
  btn_wait = 5; //in frames
  n_acc = 1;    // number accuracy in labels
  
  // color setup
    function dark_blue() (
    gfx_r = 0.12;
    gfx_g = 0.15;
    gfx_b = 0.20;
    );
    
    function darker_blue() (
    gfx_r = 0.08;
    gfx_g = 0.08;
    gfx_b = 0.1;
    );
    
    function light_grey() (
    gfx_r = 0.8;
    gfx_g = 0.8;
    gfx_b = 0.8;
    );

    function dark_grey() (
    gfx_r = 0.2;
    gfx_g = 0.2;
    gfx_b = 0.2;
    );
    
    function light_green() (
    gfx_r = 0.1;
    gfx_g = 0.6;
    gfx_b = 0.3;
    );
    
    function peak_color() (
    gfx_r = 0.9;
    gfx_g = 0.1;
    gfx_b = 0.4; 
    );
  
  gfx_setfont(0);
  
  // HEADER
  darker_blue();
  gfx_rect(0,0,gfx_w,25);
  light_grey();
  gfx_a = 0.3;
  gfx_rect(0,23,gfx_w,2);
  gfx_a = 1;
  
  //title
  gfx_x = 10;
  gfx_y = 9;
  gfx_drawstr("EBUR128 Loudness Meter");
  
  // sync button
  sync_btn_x1=283;
  sync_btn_y1=3;
  
  light_grey();
  gfx_rect(sync_btn_x1,sync_btn_y1,102,17);
  
  slider61 ? light_green() : peak_color();
  
  gfx_rect(sync_btn_x1 + 1,sync_btn_y1 + 1,100,15);
  gfx_x = sync_btn_x1 + 22;
  gfx_y = sync_btn_y1 + 5;
  light_grey();
  gfx_drawstr(slider61 ? "Sync on" : "Sync off");
  
  mouse_cap ?
  (
    mouse_x >= sync_btn_x1 &&
    mouse_x <= sync_btn_x1 + 100 &&
    mouse_y >= sync_btn_y1 &&
    mouse_y <= (sync_btn_y1 + 15) &&
    btn_timer === 0
  )
  ? 
  (slider61 ? 
    (slider61=0;
    btn_timer = btn_wait;) : 
    (slider61=1;
    btn_timer = btn_wait;)
  );
  btn_timer ? btn_timer-=1;
  
  //reset btn
  reset_btn_x1 = 393;
  reset_btn_y1 = 3;
  
  light_grey();
  gfx_rect(reset_btn_x1, reset_btn_y1,102,17);
  
  (
  mouse_x >= reset_btn_x1 &&
  mouse_x <= reset_btn_x1 + 102 &&
  mouse_y >= reset_btn_y1 &&
  mouse_y <= reset_btn_y1 + 17
  )? dark_blue() : dark_grey();
  gfx_rect(reset_btn_x1 +1, reset_btn_y1 +1,100,15);
  
  
  gfx_x = reset_btn_x1 + 32;
  gfx_y = reset_btn_y1 + 5;  
  
  
  light_grey();
  gfx_drawstr("RESET");
  
  doreset = 0;
  mouse_cap ? 
  (
    mouse_x >= reset_btn_x1 &&
    mouse_x <= reset_btn_x1 + 100 &&
    mouse_y >= reset_btn_y1 &&
    mouse_y <= (reset_btn_y1 + 15) &&
    btn_timer === 0
  )? doreset = 1;
  
  doreset ?
  (
    
    EBUR128LM.LM_EBUR128_Reset_MultiCh();
    
      slider11 = EBUR128LM.LM_EBUR128_GetIL_LUFS();
      slider12 = EBUR128LM.LM_EBUR128_GetML_LUFS();
      slider13 = EBUR128LM.LM_EBUR128_GetMLMax_LUFS();
      slider14 = EBUR128LM.LM_EBUR128_GetSL_LUFS();
      slider15 = EBUR128LM.LM_EBUR128_GetSLMax_LUFS();
      slider16 = EBUR128LM.LM_EBUR128_GetTP_dbFS();
      slider17 = EBUR128LM.LM_EBUR128_GetLRA_LU();
      
      slider21 = EBUR128LM.LM_EBUR128_GetLRA_Low();
      slider22 = EBUR128LM.LM_EBUR128_GetLRA_High();
      slider23 = EBUR128LM.LM_EBUR128_GetLRA_LU();
      slider24 = EBUR128LM.LM_EBUR128_GetLRA_Count();
  
      slider1 = slider11;
      slider2 = slider12;
      slider3 = slider13;
      slider4 = slider14;
      slider5 = slider15;
      slider6 = slider16;
      slider7 = slider17;
    
    slider_automate(slider1);
    slider_automate(slider2);
    slider_automate(slider3);
    slider_automate(slider4);
    slider_automate(slider5);
    slider_automate(slider6);
    slider_automate(slider7);
  ); 
  
  
  
  //background
  dark_blue();
  gfx_rect(0,25,gfx_w,145);
  
  darker_blue();
  gfx_a = 0.7;
  gfx_rect(10,120,gfx_w - 20,43);  
  
  //labels
  gfx_a = 1;
  function align_down(x_pos,y_mov) (
  gfx_x = x_pos;
  gfx_y += y_mov;
  );
  
  gfx_x = 10;
  gfx_y = 50;
  light_grey();
  gfx_drawstr("Momentary");
  align_down(10,25);
  gfx_drawstr("Short Term");
  align_down(10,25);
  gfx_drawstr("Integrated");

  gfx_x = 20;
  gfx_y = 130;
  gfx_drawstr("Range  ");
  gfx_x+=345;
  gfx_drawnumber(slider17,n_acc);
  gfx_drawstr(" LU");
  
  gfx_x = 20;
  gfx_y = 145;
  gfx_drawstr("True Peak  ");
  gfx_x+=15;
  slider16 > 0 ? (peak_color(); gfx_x+=8;);
  gfx_drawnumber(slider16,n_acc);
  gfx_drawstr(" dB");
  light_grey();
  
  
  //meter_bg
  gfx_a = 0.15;
  y_pos = 47;
  loop(3,
  gfx_rect(130,y_pos,249,15);
  y_pos += 25;
  );
  
  y_pos = 128;
  gfx_rect(130,y_pos,249,11);
  
  gfx_a = 1;
  function meter_scale(value, max_value, meter_width) (
  meter_width + (value * meter_width / max_value);
  );
  
  //meters scale
  light_grey();
  gfx_setfont(1,"Arial",10);
  left_margin = 122;
  gfx_x = left_margin;
  gfx_y = 30;
  number = -60;
  
  loop(7,
   gfx_x+=meter_scale(number,60,250);
   gfx_drawnumber(number,0);
   number+=10;
   gfx_x = left_margin;
  );
  
  
  //meters itself!!
  gfx_setfont(0);
  light_grey();
  y_pos = 47;
  space = 25;
  gfx_rect(130,y_pos,meter_scale(slider12,60,250),15);
  y_pos+=space;
  gfx_rect(130,y_pos,meter_scale(slider14,60,250),15);
  y_pos+=space;
  gfx_rect(130,y_pos,meter_scale(slider11,60,250),15);
  
  //loudness range
  light_green();
  gfx_x = 130 + meter_scale(slider21,60,250);
  gfx_y = 128;
  meter_x2 = 130 + meter_scale(slider22,60,250);
  gfx_rectto(meter_x2,138);
  
  (slider21 !== 0 && slider22 !== 0) ? 
  (
  gfx_y = 130;
  gfx_x = 130 + meter_scale(slider21,60,250) - 45;
  light_grey();
  gfx_drawnumber(slider21,n_acc);
  gfx_x =  130 + meter_scale(slider22,60,250)+3;
  gfx_drawnumber(slider22,n_acc); 
  );
  
  
  
  //meter_stripes
  dark_blue();
  gfx_a = 1;
  y_pos = 47;
  x_pos = 134;
  loop(62,
  gfx_rect(x_pos,y_pos,1,65);
  x_pos+=4;
  );
  
  //peaks
  peak_color();
  gfx_a = 1;
  y_pos = 47;
  x_pos = 130 + meter_scale(slider13,60,250);
  space = 25;
  gfx_rect(x_pos,y_pos, 4,15);
  gfx_x = x_pos+=8;
  gfx_y = y_pos + 4;
  gfx_drawnumber(slider13,n_acc);
  
  x_pos = 130 + meter_scale(slider15,60,250);
  y_pos+=space;
  gfx_rect(x_pos,y_pos,4,15);
  gfx_x = x_pos+=8;
  gfx_y = y_pos + 4;
  gfx_drawnumber(slider15,n_acc);
  
  
  // number_labels
  light_grey();
  gfx_x = 405; gfx_y = 51; gfx_a = 1;
  gfx_drawnumber(slider12,n_acc);
  gfx_drawstr(" LUFS");
  align_down(405,25);
  gfx_drawnumber(slider14,n_acc);
  gfx_drawstr(" LUFS");
  align_down(405,25);
  gfx_drawnumber(slider11,n_acc);
  gfx_drawstr(" LUFS");
  
// EOL@GFX
